package main

import (
	"fmt"
	"github.com/mattermost/mattermost-server/v6/model"
)

func processVoteCreate(app *application, question string, options []string, post *model.Post) {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
	vote := Vote{
		Question:  question,
		Options:   options,
		CreatorID: post.UserId,
		Closed:    false,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ –ø–æ–ª—É—á–∞–µ–º ID
	voteID, err := app.voteRepo.SaveVote(&vote)
	if err != nil {
		sendMsgToChannel(app, post.ChannelId, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", post.Id)
		app.logger.Error().Err(err)
		return
	}
	vote.ID = voteID

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := fmt.Sprintf("üìä *–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ #%s*\n*%s*\n\n", vote.ID, vote.Question)
	for i, option := range vote.Options {
		message += fmt.Sprintf("üîπ %d. %s\n", i+1, option)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
	sendMsgToChannel(app, post.ChannelId, message, "")
}

func processVote(app *application, voteID string, optionIndex int, post *model.Post) {
	// –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	vote, err := app.voteRepo.GetVoteByID(voteID)
	if err != nil {
		sendMsgToChannel(app, post.ChannelId, "–û—à–∏–±–∫–∞: –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", post.Id)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ
	if vote.Closed {
		sendMsgToChannel(app, post.ChannelId, "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ", post.Id)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª
	if _, voted := vote.Votes[post.UserId]; voted {
		sendMsgToChannel(app, post.ChannelId, "–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!", post.Id)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç–∞
	if optionIndex < 1 || optionIndex > len(vote.Options) {
		sendMsgToChannel(app, post.ChannelId, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞", post.Id)
		return
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
	if err = app.voteRepo.SaveVoteResult(voteID, post.UserId, optionIndex); err != nil {
		sendMsgToChannel(app, post.ChannelId, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ–ª–æ—Å", post.Id)
		app.logger.Error().Err(err)
		return
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≥–æ–ª–æ—Å
	confirmationMsg := fmt.Sprintf("‚úÖ –í–∞—à –≥–æ–ª–æ—Å –∑–∞ –≤–∞—Ä–∏–∞–Ω—Ç *%s* –∑–∞—Å—á–∏—Ç–∞–Ω!", vote.Options[optionIndex-1])
	sendMsgToChannel(app, post.ChannelId, confirmationMsg, post.Id)
}

func processVoteResult(app *application, voteID string, post *model.Post) {
	// –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	vote, err := app.voteRepo.GetVoteByID(voteID)
	if err != nil {
		sendMsgToChannel(app, post.ChannelId, "–û—à–∏–±–∫–∞: –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", post.Id)
		app.logger.Error().Err(err)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
	results := make(map[string]int)
	for _, choice := range vote.Votes {
		results[vote.Options[choice-1]]++
	}

	// –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
	message := fmt.Sprintf("üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è #%s*\n*%s*\n\n", vote.ID, vote.Question)
	for i, option := range vote.Options {
		count := results[option]
		message += fmt.Sprintf("üîπ %d. %s - %d –≥–æ–ª–æ—Å(–æ–≤)\n", i+1, option, count)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ –∫–∞–Ω–∞–ª
	sendMsgToChannel(app, post.ChannelId, message, "")
}

func processVoteClose(app *application, voteID string, post *model.Post) {
	vote, err := app.voteRepo.GetVoteByID(voteID)
	if err != nil {
		sendMsgToChannel(app, post.ChannelId, "–û—à–∏–±–∫–∞: –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", post.Id)
		app.logger.Error().Err(err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å
	if vote.CreatorID != post.UserId {
		sendMsgToChannel(app, post.ChannelId, "–û—à–∏–±–∫–∞: —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –º–æ–∂–µ—Ç –µ–≥–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å", post.Id)
		return
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
	if err = app.voteRepo.SaveVoteStatus(vote.ID, true); err != nil {
		sendMsgToChannel(app, post.ChannelId, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", post.Id)
		app.logger.Error().Err(err)
		return
	}

	sendMsgToChannel(app, post.ChannelId, fmt.Sprintf("‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ #%s –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", vote.ID), "")
}

func processVoteDelete(app *application, voteID string, post *model.Post) {
	vote, err := app.voteRepo.GetVoteByID(voteID)
	if err != nil {
		sendMsgToChannel(app, post.ChannelId, "–û—à–∏–±–∫–∞: –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", post.Id)
		app.logger.Error().Err(err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å
	if vote.CreatorID != post.UserId {
		sendMsgToChannel(app, post.ChannelId, "–û—à–∏–±–∫–∞: —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –º–æ–∂–µ—Ç –µ–≥–æ —É–¥–∞–ª–∏—Ç—å", post.Id)
		return
	}

	// –£–¥–∞–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
	if err = app.voteRepo.DeleteVote(voteID); err != nil {
		sendMsgToChannel(app, post.ChannelId, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", post.Id)
		app.logger.Error().Err(err)
		return
	}

	sendMsgToChannel(app, post.ChannelId, "üóë –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", post.Id)
}
